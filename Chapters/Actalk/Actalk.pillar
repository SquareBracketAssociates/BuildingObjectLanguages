!! Implementing a little actor kernel


!!! Actor: id, mailbox and behavior

[[[	
ProtoObject subclass: #AActor
	instanceVariableNames: 'mailbox behavior'
	classVariableNames: ''
	category: 'Acpha'
]]]

- ==mailbox== represents the queue of message. It is an instance of 

- ==behavior== represents the behavior with processes the message. It will be an instance of subclass of the class ActorBehavior (see below).

[[[
AActor >> initialize
	mailbox := SharedQueue new
]]]

[[[
AActor >> asynchronousSend: aMessage
	mailbox nextPut: aMessage
]]]

[[[
AActor >> initializeBehavior: aBehavior
	behavior := aBehavior.
	behavior initializeAself: self.
]]]

[[[
AActor >> mailbox
	^ mailbox
]]]

[[[
AActor >> doesNotUnderstand: aMessage
	^ self asynchronousSend: aMessage
]]]

[[[
AActor class >> behavior: aBehavior
	^ self new initializeBehavior: aBehavior	
]]]



!!! Actor behavior

[[[
Object subclass: #AActorBehavior
	instanceVariableNames: 'aself'
	classVariableNames: ''
	category: 'Acpha'
]]]

[[[
AActorBehavior >> initializeAself: anActor
	aself := anActor.
	self setProcess.
]]]

[[[
AActorBehavior >> set
	[ [ true ] whileTrue: [ self acceptNextMessage ] ] fork 
]]]

[[[
AActorBehavior >> acceptMessage: aMessage
	self perform: aMessage selector withArguments: aMessage arguments
]]]


A special message to create actor. 
[[[
AActorBehavior >> actor
	^ AActor behavior: self
]]]


!!! First example

[[[
AActorBehavior subclass: #AACounter
	instanceVariableNames: 'contents'
	classVariableNames: ''
	category: 'Acpha'
]]]

[[[
AACounter >> incr
	contents := contents + 1
]]]

[[[
AACounter >> reset
	contents := 0
]]]

!!! Conclusion





!! Another implementation
!!! Making a nicer ProtoObject 

[[[
ProtoObject subclass: #ATMinimalLearningObject
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'MiniActalk2'
]]]

[[[
ATMinimalLearningObject >> doesNotUnderstand: aMessage

	| sel |
	sel := aMessage selector.
	Transcript show: 'Does not understand ',  sel printString ; cr.
	^ (Object includesSelector: sel)
		ifTrue: [ 
				self addFromObjectSelector: sel.
				aMessage sendTo: self ]
		ifFalse: [ super doesNotUnderstand: aMessage ].
]]]	

[[[	
ATMinimalLearningObject >> addFromObjectSelector: aSelector

	self class 
			compile: (Object >> aSelector) sourceCode 
			classified: 'copied from Object'
]]]

!!! Actor 

[[[
ATMinimalLearningObject subclass: #ATActor
	instanceVariableNames: 'mailbox behavior'
	classVariableNames: ''
	package: 'MiniActalk2'
]]]

[[[	
ATActor >> initialize
	mailbox := SharedQueue new.
]]]

[[[
ATActor >> initializeBehavior: aBehavior

	behavior := aBehavior.
	behavior initializeSelf: self
]]]	

[[[	
ATActor >> aSynchronousSend: aMessage

	mailbox nextPut: aMessage
]]]

[[[
ATActor class >> behavior: aBehavior
	^ self new initializeBehavior: aBehavior
]]]	

!!! Actor Behavior
	
[[[
Object subclass: #ATActorBehavior
	instanceVariableNames: 'aself process'
	classVariableNames: ''
	package: 'MiniActalk2'
]]]	

[[[
initializeASelf: anActor
	aself := anActor. 
	self setProcess.
]]]

[[[	
setProcess
	process := [ [ true ] whileTrue: [ self acceptNextMessage]].
	process fork	
]]]

[[[
acceptNextMessage
	self acceptMessage: aself mailbox next
]]]

[[[
acceptMessage: aMessage
	^ aMessage sendTo: self	
]]]

[[[
asynchronousSend: aMessage
	mailbox nextPut: aMessage	
]]]

[[[
doesNotUnderstand: aMessage
	self asynchronousSend: aMessage	
]]]

!!! Example: a Counter

[[[
ATActorBehavior subclass: #ATCounter
	instanceVariableNames: 'contents'
	classVariableNames: ''
	package: 'MiniActalk2-Example'
]]]
	
[[[
increment
	Transcript show: 'increment';cr.
	contents := contents + 1
]]]

[[[		
reset
	Transcript show: 'reset';cr.
	contents := 0			
]]]

[[[
| atCounter |
atCounter := ATCounter new actor. 
atCounter 
	asynchronousSend: (Message selector: #reset);
	asynchronousSend: (Message selector: #increment).
]]]

[[[
| atCounter |
atCounter := ATCounter new actor. 
atCounter  reset; increment.	
]]]	

!!! With Printer

[[[
ATActorBehavior subclass: #ATPrinter
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'MiniActalk2-Example'
]]]

[[[
ATPrinter >> reply: value
	Transcript show: '> ', value printString; cr
]]]

[[[
ATCounter >> valueTo: replyDestination
	replyDestination reply: contents
]]]


[[[
| atCounter atPrinter |
atCounter := ATCounter new actor. 
atPrinter := ATPrinter new actor.
atCounter  reset; increment; valueTo: atPrinter
]]]




